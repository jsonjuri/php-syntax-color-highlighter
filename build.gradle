/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2020 Elior Boukhobza
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 *
 */
buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.kordamp:markdown-gradle-plugin:1.2.0"
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.3.12"
    id "org.jetbrains.kotlin.jvm" version "1.2.40"
    id "org.kordamp.markdown.convert" version "1.2.0"
}

repositories {
    mavenCentral()
    maven {
        url 'https://www.jetbrains.com/intellij-repository/'
    }
}

dependencies {

}

apply plugin: 'org.kordamp.markdown.convert'
apply plugin: 'java'
apply plugin: 'checkstyle'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

apply plugin: "kotlin"

//noinspection GroovyAssignabilityCheck,GrUnresolvedAccess
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    //noinspection GrUnresolvedAccess
    kotlinOptions {
        apiVersion = "1.5"
        jvmTarget = "1.8"
    }
}

sourceSets {
    main {
        java.srcDirs 'src/main/java'
        resources.srcDir 'src/main/resources'
    }
    test {
        java.srcDir 'src/test/java'
        resources.srcDir 'src/test/resources'
    }
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

markdownToHtml {
    sourceDir new File("$projectDir/docs")
    outputDir new File("$projectDir/docs")
}

version = System.getenv("pluginVersion") ?: pluginVersion

intellij {
    pluginName pluginName
//    type 'IU'
    version 'LATEST-EAP-SNAPSHOT'
    downloadSources true
//    sameSinceUntilBuild false
    updateSinceUntilBuild true
    alternativeIdePath idePath
//    systemProperty "idea.platform.prefix","DataGrip"

    patchPluginXml {
        version "$version"
        sinceBuild System.getenv("pluginSinceBuild") ?: sinceBuildP
        changeNotes file("$projectDir/docs/CHANGELOG.html").text
//        untilBuild System.getenv("pluginUntilBuild") ?: untilBuildP
    }

    publishPlugin {
        username System.getenv("publishUsername") ?: publishUsername
        password System.getenv("publishPassword") ?: publishPassword
    }
}
compileKotlin {
    kotlinOptions {
        apiVersion = "1.5"
    }
}

